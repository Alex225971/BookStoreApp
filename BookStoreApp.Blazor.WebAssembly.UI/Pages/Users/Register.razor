@page "/users/register"
@inject IClient httpClient
@rendermode InteractiveServer
@inject NavigationManager navManager

<h3>Register a new account</h3>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert-danger">
        <p>@message</p>
    </div>
}

<div class="card-body">
    <EditForm FormName="RegisterUser" Model="RegistrationModel" OnValidSubmit="HandleRegistrationAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label>Email Address</label>
            <InputText class="form-control mb-2" @bind-Value="RegistrationModel.Email" />
            <ValidationMessage For="@(() => RegistrationModel.Email)" />
        </div>
        <div class="form-group">
            <label>First Name</label>
            <InputText class="form-control mb-2" @bind-Value="RegistrationModel.FirstName" />
            <ValidationMessage For="@(() => RegistrationModel.FirstName)" />
        </div>
        <div class="form-group">
            <label>Last Name</label>
            <InputText class="form-control mb-2" @bind-Value="RegistrationModel.LastName" />
            <ValidationMessage For="@(() => RegistrationModel.LastName)" />
        </div>
        <div class="form-group">
            <label>Password</label>
            <InputText class="form-control mb-2" type="password" @bind-Value="RegistrationModel.Password" />
            <ValidationMessage For="@(() => RegistrationModel.Password)" />
        </div>
        <button type="submit" class="btn btn-primary btn-block mt-2">Register</button>
    </EditForm>
</div>

@code {
    UserDto RegistrationModel = new UserDto
    {
        Role = "User"
    };
    string message = string.Empty;

    private async Task HandleRegistrationAsync()
    {
        try
        {
            await httpClient.RegisterAsync(RegistrationModel);
            NavigateToLogin();

        } 
        catch (ApiException e)
        {
            if(e.StatusCode >= 200 && e.StatusCode <= 299)
            {
                NavigateToLogin();
            }
            message = e.Message;
        } 
        catch(Exception e)
        {
            throw;
        }

    }

    private void NavigateToLogin()
    {
        navManager.NavigateTo("/users/login");
    }
}
