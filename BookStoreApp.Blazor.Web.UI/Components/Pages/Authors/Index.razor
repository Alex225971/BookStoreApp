@page "/authors/"
@using BookStoreApp.Blazor.Web.UI.Models
@inject IClient httpClient
@inject IAuthorService authorService
@inject NavigationManager navManager
@inject IJSRuntime js

<h3>Index</h3>


@if (!response.Success)
{
    <div class="alet alert-danger">
        <h4>@response.Message</h4>
    </div>
}

else
{
    @if (Authors == null)
    {
        <div class="alert alert-info">
            <h4>Loading data...</h4>
        </div>
    }

    else
    {
        <AuthorizeView Roles="Admin">
            <a class="btn btn-primary" href="/authors/create">Create</a>
        </AuthorizeView>
        <AuthorTable Authors="Authors" TotalSize="TotalSize" OnScroll="LoadAuthors"/>
        
        @* <table class="table table-responsive">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var author in Model)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.LastName</td>
                        <td>
                            <a class="btn btn-secondary" href="authors/details/@author.Id">Details</a>
                            <AuthorizeView Roles="Admin">
                                <a class="btn btn-outline-primary" href="authors/edit/@author.Id">Edit</a>
                                <button class="btn btn-danger" onclick=@(() => Delete(@author.Id))>Delete</button>
                            </AuthorizeView>
                        </td>

                    </tr>
                }
            </tbody>
        </table> *@
    }
}


@code {
    public List<AuthorReadOnlyDto> Authors;
    public int TotalSize { get; set; }
    private Response<AuthorReadOnlyDtoVirtualizeResponse> response = new Response<AuthorReadOnlyDtoVirtualizeResponse> { Success = true };

    protected override async Task OnInitializedAsync()
    {
        response = await authorService.Get(new QueryParams { StartIndex = 0 });

        if (response.Success)
        {
            Authors = response.Data.Results.ToList();
        }
    }

    private async Task LoadAuthors(QueryParams queryParams)
    {
        var virualizeResult = await authorService.Get(queryParams);
        Authors = virualizeResult.Data.Results.ToList();
        TotalSize = virualizeResult.Data.TotalSize;
    }

}
