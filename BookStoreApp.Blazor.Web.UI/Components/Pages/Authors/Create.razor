@page "/authors/create"
@inject IAuthorService authorService
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Admin")]

<div class="card">
    <div class="card-title">
        <h3>Create new author</h3>
    </div>


    <div class="card-body">
        <EditForm Model="Model" OnValidSubmit="HandleCreate">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label>First Name</label>
                <InputText class="form-control mb-2" type="text" @bind-Value="Model.FirstName" />
                <ValidationMessage For="@(() => Model.FirstName)" />
            </div>
            <div class="form-group">
                <label>Last Name</label>
                <InputText class="form-control mb-2" type="text" @bind-Value="Model.LastName" />
                <ValidationMessage For="@(() => Model.LastName)" />
            </div>
            <div class="form-group">
                <label>Biography</label>
                <InputText class="form-control mb-2" type="text" @bind-Value="Model.Bio" />
                <ValidationMessage For="@(() => Model.Bio)" />
            </div>
            <button class="btn btn-primary" type="submit">
                <span class="bi bi-plus-square-fill-nav-menu"></span>
                Create Author
            </button>
            <button @onclick="BackToAuthors" class="btn btn-outline-primary" type="button">
                <span class="bi bi-house-door-fill-nav-menu"></span>
                Back to authors
            </button>
        </EditForm>
    </div>
</div>


@code {
    private AuthorCreateDto Model = new AuthorCreateDto();

    private async Task HandleCreate()
    {
        var response = await authorService.CreateAuthor(Model);
        if (response.Success)
        {
            BackToAuthors();
        }
    }

    private void BackToAuthors()
    {
        navManager.NavigateTo("/authors/");
    }
}
