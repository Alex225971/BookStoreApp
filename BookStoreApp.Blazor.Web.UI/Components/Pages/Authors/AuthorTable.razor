@using BookStoreApp.Blazor.Web.UI.Models
@inject IAuthorService authorService
@inject IJSRuntime js

<table class="table table-responsive">

    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        <Virtualize ItemsProvider="LoadAuthors" Context="author">
            <tr>
                <td>@author.FirstName</td>
                <td>@author.LastName</td>
                <td>
                    <a class="btn btn-primary" href="/authors/details/@author.Id">Details</a>
                    <AuthorizeView Roles="Admin">
                        <a class="btn btn-danger" href="/authors/edit/@author.Id">Edit</a>
                        <button class="btn btn-danger" @onclick=@(() => Delete(@author.Id))>Delete</button>
                    </AuthorizeView>
                </td>
            </tr>
        </Virtualize>
    </tbody>
</table>

@code {
    [Parameter]
    public List<AuthorReadOnlyDto> Authors { get; set; }

    [Parameter]
    public int TotalSize { get; set; }

    [Parameter]
    public EventCallback<QueryParams> OnScroll { get; set; }

    private async ValueTask<ItemsProviderResult<AuthorReadOnlyDto>> LoadAuthors(ItemsProviderRequest request)
    {
        var productNum = Math.Min(request.Count, TotalSize - request.StartIndex);
        await OnScroll.InvokeAsync(new QueryParams
            {
                StartIndex = request.StartIndex,
                PageSize = productNum == 0 ? request.Count : productNum
            });
        return new ItemsProviderResult<AuthorReadOnlyDto>(Authors, TotalSize);
    }

    private async Task Delete(int authorId)
    {
        var author = Authors.First(a => a.Id == authorId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are you sure you wish to delete this author? ({author.FirstName} {author.LastName})");
        if (confirm)
        {
            var response = await authorService.Delete(authorId);
            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }
}
